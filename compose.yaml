# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - skyblog_network
    mem_limit: 1g
    command: mongod --wiredTigerCacheSizeGB 0.5
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./back:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - skyblog_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - 5173:5173
    volumes:
      - ./front:/usr/src/app
      - /usr/src/app/node_modules
    stdin_open: true
    tty: true
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - skyblog_network

networks:
  skyblog_network:
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
volumes:
  mongo-data:
# secrets:
#   db-password:
#     file: db/password.txt

